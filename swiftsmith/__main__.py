import random
import swiftsmith
import sys
from datetime import date

if len(sys.argv) > 1:
    random.seed(sys.argv[1])
else:
    random.seed("swiftsmith")

print(f"\n// Generated by Swiftsmith on {date.today().strftime('%B %d, %Y')}")
x = swiftsmith.swift.randomtree()

# We play a game of musical chairs to ensure that the generated main function uses a
# function defined in the generated code instead of one imported from the standard
# library. Public symbols are visible from anywhere in the scope tree, so when the
# program is generated then the file scope and standard library scope must be in the
# same tree. When main is generated, they must be in different trees.

rootscope = swiftsmith.Scope()
rootscope.import_standard_library()
x.annotate(scope=rootscope)
print(x.string())


from swiftsmith.expression import FunctionCall
from swiftsmith.semantics import SemanticParseTree
from swiftsmith.standard_library import Int

# break the link between rootscope and the standard library scopes
rootscope.children = [rootscope.children[-1]]

rootscope.declare("x", Int, False)
fname, ftype = rootscope.choose_function()
mainbody = SemanticParseTree(FunctionCall(fname, ftype))
mainbody.annotate(scope=rootscope)

print(f"""
public func main(_ x: Int) -> {ftype.returntype.name} {{
    return {mainbody.string()}
}}""")
